@model RentalHouseFinding.Models.PostViewModel
@{
    ViewBag.Title = "Index";
}

<h2>Create a post</h2>

<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui-1.8.11.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="http://maps.google.com/maps/api/js?sensor=false"></script>

<script type="text/javascript">
    
</script>
<script type="text/javascript">
    $(document).ready(function () {
        var marker;
        var map;
        function initialize() {
            var mapProp = {
                center: new google.maps.LatLng(21.04349121680354, 105.523681640625),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("mapContainer"), mapProp);
            google.maps.event.addListener(map, 'click', function (event) {
                if (marker == null) {
                    marker = new google.maps.Marker({
                        position: event.latLng,
                        map: map,
                        draggable: true
                    });
                } else {
                    marker.setPosition(event.latLng);
                }
                $('#Lat').val(event.latLng.lat());
                $('#Lon').val(event.latLng.lng());
            });

        }

        $("#ProvinceId").change(function () {
            var idPro = $(this).val();
            var select = $("#DistrictId");
            select.empty();
            select.append($('<option/>', {
                value: '',
                text: '-- Chọn Quận/Huyện --'
            }));
            $.getJSON("service/GetDistrictList", { id: idPro },
                function (myData) {
                    
                    $.each(myData, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.Value,
                            text: itemData.Text
                        }));
                    });
                });
            $.getJSON("service/GetLatLon", { id: idPro, type: "province" },
                function (myData) {
                    $.each(myData, function (index, itemData) {
                        var provinceLatLon = new google.maps.LatLng(itemData.Value.split(';')[0], itemData.Value.split(';')[1]);
                        map.setOptions({
                            center: provinceLatLon,
                            zoom: 11
                        });
                    });
                });
        });
        $("#DistrictId").change(function () {
            var idDis = $(this).val();
            $.getJSON("service/GetLatLon", { id: idDis, type: "district" },
            function (myData) {
                $.each(myData, function (index, itemData) {
                    var districtLatLon = new google.maps.LatLng(itemData.Value.split(';')[0], itemData.Value.split(';')[1]);
                    map.setOptions({
                        center: districtLatLon,
                        zoom: 14
                    });
                });
            });
        });

        $("#Street").change(function () {

            //var NumberHouse = $('#NumberHouse').val();
            var Street = $(this).val();
            var District = $("#DistrictId option:selected").text();
            var Province = $("#ProvinceId option:selected").text();
            var geocoder = new google.maps.Geocoder();
            var address = Street + ' ' + District + ' ' + Province;

            if (geocoder) {
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        map.setOptions({
                            center: results[0].geometry.location,
                            zoom: 16
                        });
                        if (marker == null) {
                            marker = new google.maps.Marker({
                                position: results[0].geometry.location,
                                map: map,
                                draggable: true
                            });
                        }
                        else {
                            marker.setPosition(results[0].geometry.location);

                        }                       

                    }
                    else {
                        alert("Geocoding failed: " + status);
                    }
                });
            }
        });

        google.maps.event.addDomListener(window, 'load', initialize);
        google.setOnLoadCallback(initialize);
    });
</script>
@Html.ValidationSummary(true, "Vui lòng kiểm tra lại thông tin như thông báo bên dưới!", new { style = "color:red" })
@using (Html.BeginForm())
{
    <div id= "create-post-page">
        <div class = "content" style="float:left;" >
            <div class="editor-label">
                @Html.LabelFor(model => model.Title)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PhoneActive)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PhoneActive)
                @Html.ValidationMessageFor(model => model.PhoneActive)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.CategoryId)
            </div>
            <div class="editor-field">
                @Html.DropDownList("CategoryId")
                @Html.ValidationMessageFor(model => model.CategoryId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ProvinceId)
            </div>
            <div class="editor-field">            
                @Html.DropDownList("ProvinceId", (IEnumerable<SelectListItem>)ViewBag.ProvinceId,"-- Chọn Tỉnh/Thành phố")
                @Html.ValidationMessageFor(model => model.ProvinceId)                 
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.DistrictId)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.DistrictId, 
        new SelectList(Enumerable.Empty<SelectListItem>(), "Id", "Name"), "-- Chọn Quận/Huyện --", 
        new { id = "DistrictId" })
                @Html.ValidationMessageFor(model => model.DistrictId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.NumberHouse)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.NumberHouse)
                @Html.ValidationMessageFor(model => model.NumberHouse)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Street)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Street)
                @Html.ValidationMessageFor(model => model.Street)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Price)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Price)
                @Html.ValidationMessageFor(model => model.Price)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Area)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Area)
                @Html.ValidationMessageFor(model => model.Area)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasInternet)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasInternet)
                @Html.ValidationMessageFor(model => model.HasInternet)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ElectricityFee)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ElectricityFee)
                @Html.ValidationMessageFor(model => model.ElectricityFee)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.WaterFee)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.WaterFee)
                @Html.ValidationMessageFor(model => model.WaterFee)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasTVCable)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasTVCable)
                @Html.ValidationMessageFor(model => model.HasTVCable)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasBed)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasWaterHeater)
                @Html.ValidationMessageFor(model => model.HasWaterHeater)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsAllowCooking)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.IsAllowCooking)
                @Html.ValidationMessageFor(model => model.IsAllowCooking)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasMotorParking)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasMotorParking)
                @Html.ValidationMessageFor(model => model.HasMotorParking)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasToilet)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasToilet)
                @Html.ValidationMessageFor(model => model.HasToilet)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasAirConditioner)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasAirConditioner)
                @Html.ValidationMessageFor(model => model.HasAirConditioner)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasGarage)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasGarage)
                @Html.ValidationMessageFor(model => model.HasGarage)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsStayWithOwner)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.IsStayWithOwner)
                @Html.ValidationMessageFor(model => model.IsStayWithOwner)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.RestrictHours)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.RestrictHours)
                @Html.ValidationMessageFor(model => model.RestrictHours)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Direction)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Direction)
                @Html.ValidationMessageFor(model => model.Direction)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HasSecurity)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HasSecurity)
                @Html.ValidationMessageFor(model => model.HasSecurity)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PhoneContact)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PhoneContact)
                @Html.ValidationMessageFor(model => model.PhoneContact)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Email)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Yahoo)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Yahoo)
                @Html.ValidationMessageFor(model => model.Yahoo)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Skype)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Skype)
                @Html.ValidationMessageFor(model => model.Skype)
            </div>

            <p>
                <input type="submit" value="Create" />
            </p>
        </div>
        <div class = "map" style="float:right;">
            <div id="mapContainer" style="width:700px;height:480px;"></div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Lat)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Lon)
            </div>
        </div>
        <div class = "clear" style="clear:both;">
        </div>
    </div>
}
